/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package interfaz;

import analizadorLexico.AnalizadorLexicoIDE;
import analizadorLexico.parserIde;
import analizador_ide.lexicoSql;
import analizador_ide.parserSql;
import clases.Archivo;
import clases.CSV;
import clases.ERROR;
import clases.delete;
import clases.folder;
import static clases.folder.getnewpath;
import clases.insert;
import clases.proyecto;
import clases.select;
import clases.sql;
import clases.update;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Arrays;
import java_cup.runtime.Symbol;

import javax.swing.JOptionPane;

import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;

/**
 *
 * @author jhonny
 */
public class project extends javax.swing.JFrame {

    /**
     * Creates new form project
     */
    public static File file;
    public static String absoluthepath;
    private String carpeta, filecsv, newname;
    public static String estructura;
    private int seleccion;
    ArrayList<String> list;

    public project() {
        seleccion = 0;
        initComponents();
        estructura = "";
        list = new ArrayList();
        //file = new File("/home/jhonny/Escritorio/pj1/pj1.ide");
        method();
        this.setLocationRelativeTo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem3 = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txt_consulta = new javax.swing.JEditorPane();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabbepane = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();

        jMenuItem3.setText("jMenuItem3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(187, 177, 168));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setBackground(new java.awt.Color(74, 110, 124));
        jScrollPane1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, null, new java.awt.Color(194, 114, 114), null, null));

        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 160, 560));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 180, 650));

        jPanel2.setBackground(new java.awt.Color(221, 217, 213));
        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black, java.awt.Color.black));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txt_consulta.setBackground(new java.awt.Color(224, 215, 215));
        txt_consulta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_consultaKeyReleased(evt);
            }
        });
        jScrollPane3.setViewportView(txt_consulta);

        jPanel2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 60, 800, 110));

        jLabel1.setFont(new java.awt.Font("Ubuntu Mono", 1, 18)); // NOI18N
        jLabel1.setText("CONSULTA SQL----->");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 270, -1));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 400, 850, 220));

        tabbepane.setBorder(new javax.swing.border.MatteBorder(null));
        jScrollPane2.setViewportView(tabbepane);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 10, 840, 360));

        jMenu3.setText("Opciones");

        jMenuItem1.setText("crear carpeta");
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuItem1MouseClicked(evt);
            }
        });
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem2.setText("nuevo archivo csv");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuItem4.setText("eliminar archivo/carpeta");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem4);

        jMenuItem5.setText("cambiar de nombre");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuItem6.setText("menu principal");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem6);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MouseClicked
        String path = "";
        try {
            path = jTree1.getSelectionPath().toString();
            absoluthepath = "";
            if (path.contains(".csv") && seleccion == 0) {
                String array1[] = path.split("");
                String tmps = Archivo.path(array1, "");
                absoluthepath = folder.getnewpath(file.getAbsolutePath(), 2) + "/" + tmps;
                File f = new File(absoluthepath);

                contenidocsv tmp = new contenidocsv();
                tabbepane.addTab(f.getName(), tmp);
                tabbepane.setSelectedComponent(tmp);
                jTree1.clearSelection();
                seleccion = 0;
            } else {
                estructura = "";
                switch (seleccion) {
                    case 1:

                        try {
                            path = jTree1.getSelectionPath().toString();
                            carpeta.isEmpty();
                            Archivo.create(carpeta);
                            TreeNode raiz = (TreeNode) jTree1.getModel().getRoot();
                            proyecto.generarnuevaEstructura(raiz);
                            parserIde.errorSintatico = new ArrayList();
                            AnalizadorLexicoIDE.errorLexico = new ArrayList();

                            if (validar(estructura)) {
                                File archivotmp = new File(file.getAbsolutePath());
                                String dir = file.getAbsolutePath();
                                if (Archivo.create(path, 1, carpeta)) {
                                    if (archivotmp.exists()) {
                                        archivotmp.delete();
                                        proyecto.escribirFichero(dir, "", "", estructura, 2);
                                        file = new File(dir);
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(this, "La carpeta ya existe");
                                }

                            } else {
                                getErro();
                            }

                        } catch (NullPointerException e) {
                        }
                        seleccion = 0;
                        method();

                        break;

                    case 2:
                        if (!path.contains(".csv")) {
                            try {
                                path = jTree1.getSelectionPath().toString();
                                carpeta.isEmpty();
                                Archivo.create(carpeta);
                                TreeNode raiz = (TreeNode) jTree1.getModel().getRoot();
                                proyecto.generarnuevaEstructura(raiz);
                                parserIde.errorSintatico = new ArrayList();
                                AnalizadorLexicoIDE.errorLexico = new ArrayList();

                                if (validar(estructura)) {
                                    String dir = file.getAbsolutePath();
                                    File archivotmp = new File(dir);
                                    String tmp = folder.getnewpath(dir, 2) + "/" + folder.getnewpath(path) + "/" + carpeta;
                                    if (new File(tmp).exists()) {
                                        JOptionPane.showMessageDialog(this, "el archivo ya existe");
                                    } else {
                                        String linearows = "";
                                        for (int i = 0; i < list.size(); i++) {
                                            if (i == list.size() - 1) {
                                                linearows += list.get(i);
                                            } else {
                                                linearows += list.get(i) + ",";
                                            }
                                        }
                                        if (proyecto.escribirFichero(tmp, "", "", linearows, 2)) {

                                            if (archivotmp.exists()) {
                                                archivotmp.delete();
                                                proyecto.escribirFichero(dir, "", "", estructura, 2);
                                                file = new File(dir);
                                            }
                                        } else {
                                            JOptionPane.showMessageDialog(this, "error al crear archivo, intente de nuevo");

                                        }
                                    }

                                } else {
                                    getErro();
                                }

                            } catch (NullPointerException e) {
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "No puedes crear un archivo sobre un archivo .csv");

                        }
                        seleccion = 0;
                        break;
                    case 5:
                        if (!path.contains(".csv")) {
                            try {
                                path = jTree1.getSelectionPath().toString();
                                carpeta.isEmpty();
                                Archivo.create(carpeta);
                                TreeNode raiz = (TreeNode) jTree1.getModel().getRoot();
                                proyecto.generarnuevaEstructura(raiz);
                                parserIde.errorSintatico = new ArrayList();
                                AnalizadorLexicoIDE.errorLexico = new ArrayList();

                                if (validar(estructura)) {
                                    String dir = file.getAbsolutePath();
                                    File archivotmp = new File(dir);
                                    String tmp = folder.getnewpath(dir, 2) + "/" + folder.getnewpath(path) + "/" + carpeta;
                                    if (new File(tmp).exists()) {
                                        JOptionPane.showMessageDialog(this, "el archivo ya existe");
                                    } else {
                                        String[] dato = new String[list.size()];
                                        for (int i = 0; i < dato.length; i++) {
                                            dato[i] = list.get(i);

                                        }
                                        if (CSV.escribir(tmp, dato)) {

                                            if (archivotmp.exists()) {
                                                archivotmp.delete();
                                                proyecto.escribirFichero(dir, "", "", estructura, 2);
                                                file = new File(dir);
                                            }
                                        } else {
                                            JOptionPane.showMessageDialog(this, "error al crear archivo, intente de nuevo");

                                        }
                                    }

                                } else {
                                    getErro();
                                   // get();
                                }

                            } catch (NullPointerException e) {
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "No puedes crear un archivo sobre un archivo .csv");

                        }
                        seleccion = 0;
                        break;
                    case 4:

                        try {
                            estructura = "";
                            newname.isEmpty();
                            if (path.contains(".csv")) {
                                newname += ".csv";
                            }
                            Archivo.update(newname);

                            TreeNode raiz = (TreeNode) jTree1.getModel().getRoot();
                            proyecto.generarnuevaEstructura(raiz);

                            String dir = file.getAbsolutePath();
                            File archivotmp = new File(dir);
                            parserIde.errorSintatico = new ArrayList();
                            AnalizadorLexicoIDE.errorLexico = new ArrayList();

                            if (validar(estructura)) {
                                if (Archivo.update(folder.getnewpath(dir, 2) + "/" + folder.getnewpath(path), newname)) {
                                    if (archivotmp.exists()) {
                                        archivotmp.delete();

                                        proyecto.escribirFichero(dir, "", "", estructura, 2);
                                        file = new File(dir);
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(this, "Intente con un nombre diferente");
                                }
                            } else {
                                
                                   getErro();
                            }
                        } catch (NullPointerException e) {
                        }
                        seleccion = 0;
                        break;
                    case 3:

                        Archivo.delete();
                        get();
                        parserIde.errorSintatico = new ArrayList();
                        AnalizadorLexicoIDE.errorLexico = new ArrayList();

                        if (validar(estructura)) {
                            if (Archivo.delete(folder.getnewpath(file.getAbsolutePath(), 2) + "/" + folder.getnewpath(path))) {
                                String dir = file.getAbsolutePath();
                                File archivotmp = new File(dir);
                                if (archivotmp.exists()) {
                                    archivotmp.delete();
                                    proyecto.escribirFichero(dir, "", "", estructura, 2);
                                    file = new File(dir);
                                }
                            } else {
                                JOptionPane.showMessageDialog(this, "Error al eliminar archivo");
                            }
                        } else {
                            getErro();
                            
                        }
                        seleccion = 0;

                        break;

                }

                method();
            }

        } catch (java.lang.NullPointerException e) {

        }


    }//GEN-LAST:event_jTree1MouseClicked

    private void jMenuItem1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MouseClicked
        // TODO add your handling code here:


    }//GEN-LAST:event_jMenuItem1MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:

        carpeta = JOptionPane.showInputDialog(this, "introduzca el nombre");
        try {
            carpeta.isEmpty();
            JOptionPane.showMessageDialog(this, "Sobre el menu de la izquierda de click derecho sobre alguna carpeta");
            seleccion = 1;
        } catch (NullPointerException e) {
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        newname = JOptionPane.showInputDialog(this, "introduzca el nuevo nombre");
        try {
            newname.isEmpty();
            JOptionPane.showMessageDialog(this, "Sobre el menu de la izquierda de click derecho sobre alguna carpeta");
            seleccion = 4;
        } catch (NullPointerException e) {
            seleccion = 0;
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, "Sobre el menu de la izquierda de click derecho sobre alguna carpeta ");
        seleccion = 3;
    }//GEN-LAST:event_jMenuItem4ActionPerformed


    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        carpeta = JOptionPane.showInputDialog(this, "introduzca el nombre");
        list = new ArrayList();
        try {
            carpeta.isEmpty();
            boolean v = true;
            int cant = 0;
            while (v) {
                while (v) {
                    String columnas = JOptionPane.showInputDialog(this, "para parar presione cancelar", "ingrese las columnas", 2);

                    try {
                        if (columnas.isEmpty()) {
                            JOptionPane.showMessageDialog(this, "no se aceptan columnas vacias");

                        } else {
                            if (columnas.contains(",")) {
                                JOptionPane.showMessageDialog(this, "El nombre de una columna no puede contener : ','");
                            } else {
                                list.add(columnas);
                                cant++;
                            }
                        }
                    } catch (NullPointerException e) {
                        if (cant > 0) {
                            v = false;
                        } else {
                            JOptionPane.showMessageDialog(this, "Ingrese al menos una columna");

                        }
                    }

                }

            }
            JOptionPane.showMessageDialog(this, "Sobre el menu de la izquierda de click derecho sobre alguna carpeta ");
            seleccion = 5;
            carpeta += ".csv";
        } catch (NullPointerException e) {
        }

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void txt_consultaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_consultaKeyReleased
        // TODO add your handling code here:

        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String txt = txt_consulta.getText();
            txt = txt.replace("\n", "");

            if (txt.contains(";")) {
                parserSql.arraycolumnas = new ArrayList();
                parserSql.arrayvalores = new ArrayList();
                parserSql.arraycon = new ArrayList();
                parserSql.arrayasig = new ArrayList();
                parserSql.consultas = new ArrayList();

                lexicoSql.erroresLexicos = new ArrayList();
                parserSql.erroresSintaticos = new ArrayList();

                lexicoSql Lexico = new lexicoSql(new StringReader(txt));
                try {
                    new parserSql(Lexico).parse();
                } catch (Exception ex) {
                }
                if (parserSql.erroresSintaticos.isEmpty() && lexicoSql.erroresLexicos.isEmpty()) {

                    for (int i = 0; i < parserSql.consultas.size(); i++) {
                        sql tmp = parserSql.consultas.get(i);

                        switch (tmp.getConsulta()) {
                            case "SELECCIONAR":
                                select select = new select();
                                select.solicitarConsulta(tmp);
                                if (select.getValues().isEmpty()) {
                                    JOptionPane.showMessageDialog(this, "no hay valores");
                                } else {

                                    tabla tmps = new tabla();

                                    if (tmp.getColumnas().get(0).equals("*")) {
                                        tmps.llenar2(select.getC(), select.getValues());
                                        tabbepane.addTab("consulta", tmps);
                                        tabbepane.setSelectedComponent(tmps);
                                    } else {
                                        
                                        ArrayList<String[]> t=new ArrayList();
                                        for (int j = 0; j < select.getValues().size(); j+=2) {
                                            String newtxt="";
                                            String array[]=select.getValues().get(j);
                                            for (int k = 0; k < array.length; k++) {
                                                try{
                                                    array[k].isEmpty();
                                                    newtxt+=array[k]+",";
                                                }catch(Exception e){}
                                                
                                            }
                                            String newarray[]=newtxt.split(",");
                                            t.add(newarray);
                                            
                                        }
                                        ArrayList <String> c=new ArrayList();
                                        for (int j = tmp.getColumnas().size()-1; j >=0 ; j--) {
                                            c.add(tmp.getColumnas().get(j));
                                            
                                        }
                                         tmps.llenar2(c, t);
                                        tabbepane.addTab("consulta", tmps);
                                        tabbepane.setSelectedComponent(tmps);
                                      /*  selects s = new selects();
                                        String t = "";
                                        
                                        for (int j = tmp.getColumnas().size() - 1; j >= 0; j--) {
                                            t+= tmp.getColumnas().get(j) + ",";
                                        }
                                        
                                        t += "\n";
                                        t += select.getTxto();
                                        s.llenar(t);
                                        tabbepane.addTab("consulta", s);
                                        tabbepane.setSelectedComponent(s);*/

                                    }

                                }
                                break;
                            case "INSERTAR":
                                insert insert = new insert();
                                JOptionPane.showMessageDialog(this, insert.insertar(tmp));
                                break;
                            case "ELIMINAR":
                                delete delete = new delete();
                                JOptionPane.showMessageDialog(this, delete.eliminar(tmp));
                                break;
                            case "ACTUALIZAR":
                                update up = new update();
                                String msj = up.actualizar(tmp);

                                if (msj.equals("Datos actualizados")) {
                                    CSV.escribir(up.getP(), up.getData());
                                    JOptionPane.showMessageDialog(this, "proceso realizado");

                                } else if (msj.equals("0")) {
                                    JOptionPane.showMessageDialog(this, "Error al actualizar");

                                } else if (msj.equals("1")) {
                                    JOptionPane.showMessageDialog(this, "verifique la ruta del archivo");

                                }

                                break;
                        }

                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Errores --------------> ");
                    ArrayList<String[]> list1 = new ArrayList();
                    ArrayList<String> row = new ArrayList();
                    row.add("Error en linea");
                    row.add("Error en columna");
                    row.add("Valor de:");

                    for (int i = 0; i < lexicoSql.erroresLexicos.size(); i++) {
                        ERROR e = lexicoSql.erroresLexicos.get(i);
                        String t[] = {String.valueOf(e.getLinea()), String.valueOf(e.getColumna()), e.getValor()};
                        list1.add(t);
                    }

                    tabla lex = new tabla();
                    lex.llenar2(row, list1);
                    tabbepane.addTab("Errores lexico", lex);
                    tabbepane.setSelectedComponent(lex);

                    ArrayList<String[]> list2 = new ArrayList();
                    for (int i = 0; i < parserSql.erroresSintaticos.size(); i++) {
                        Symbol e = parserSql.erroresSintaticos.get(i);
                        String t[] = {String.valueOf(e.left), String.valueOf(e.right), String.valueOf(e.value)};
                        list2.add(t);

                    }
                    tabla sin = new tabla();
                    sin.llenar2(row, list2);
                    tabbepane.addTab("Errores Sitatico", sin);
                    tabbepane.setSelectedComponent(sin);

                }
            }
        }
    }//GEN-LAST:event_txt_consultaKeyReleased

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        main main = new main();
        main.show();

    }//GEN-LAST:event_jMenuItem6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(project.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(project.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(project.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(project.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new project().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    public static javax.swing.JTree jTree1;
    public static javax.swing.JTabbedPane tabbepane;
    private javax.swing.JEditorPane txt_consulta;
    // End of variables declaration//GEN-END:variables

    private void method() {
        folder folder = new folder();
        DefaultTreeModel tmp = new DefaultTreeModel(folder.getArbol(getnewpath(file.getAbsolutePath(), 1)));
        jTree1.setModel(tmp);

    }

    private boolean validar(String txt) {
        AnalizadorLexicoIDE lexico = new AnalizadorLexicoIDE(new StringReader(estructura));
        try {
            new parserIde(lexico).parse();
        } catch (Exception ex) {
        }
        if (parserIde.errorSintatico.isEmpty() && AnalizadorLexicoIDE.errorLexico.isEmpty()) {
            return true;
        } else {
            JOptionPane.showMessageDialog(this, "errores---------->");
            return false;
        }
    }

    private void get() {
        TreeNode raiz = (TreeNode) jTree1.getModel().getRoot();
        proyecto.generarnuevaEstructura(raiz);
    }

    private void getErro() {
        String erroresLexico = "";
        ArrayList<String> colums = new ArrayList();
        colums.add("Linea");
        colums.add("Columna");
        colums.add("Valor");
        ArrayList<String[]> rows = new ArrayList();

        for (int i = 0; i < AnalizadorLexicoIDE.errorLexico.size(); i++) {
            ERROR e = AnalizadorLexicoIDE.errorLexico.get(i);
            rows.add(new String[]{String.valueOf(e.getLinea()+1), String.valueOf(e.getColumna()), String.valueOf(e.getValor())});
        }

        selects s = new selects();
        s.llenar(estructura);
        tabbepane.addTab("Archivo", s);
        tabbepane.setSelectedComponent(s);

        tabla lex = new tabla();
        lex.llenar2(colums, rows);
        tabbepane.addTab("Errores lexico", lex);
        tabbepane.setSelectedComponent(lex);

       getError2();
    }
    private void getError2(){
        ArrayList<String> colums = new ArrayList();
        colums.add("Linea");
        colums.add("Columna");
        colums.add("Valor");
        ArrayList<String[]> rows = new ArrayList();
        for (int i = 0; i < parserIde.errorSintatico.size(); i++) {
            Symbol e=parserIde.errorSintatico.get(i);
            rows.add(new String []{(String.valueOf(e.left)),(String.valueOf(e.right)),(String.valueOf(e.value))});
            
            
        }
        tabla lex = new tabla();
        lex.llenar2(colums, rows);
        tabbepane.addTab("Error sintatico", lex);
        tabbepane.setSelectedComponent(lex);
        
        
    }
}
