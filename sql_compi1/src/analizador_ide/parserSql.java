//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 13 09:45:41 CST 2020
//----------------------------------------------------
package analizador_ide;

import static analizador_ide.parserSql.arrayasig;
import static analizador_ide.parserSql.arraycolumnas;
import static analizador_ide.parserSql.arraycon;
import static analizador_ide.parserSql.arrayvalores;

import clases.asignaciones;
import clases.condiciones;
import clases.sql;
import java.util.ArrayList;
import java_cup.runtime.Symbol;

/**
 * CUP v0.11a beta 20060608 generated parser.
 *
 * @version Thu Feb 13 09:45:41 CST 2020
 */
public class parserSql extends java_cup.runtime.lr_parser {

    /**
     * Default constructor.
     */
    public parserSql() {
        super();
    }

    /**
     * Constructor which sets the default scanner.
     */
    public parserSql(java_cup.runtime.Scanner s) {
        super(s);
    }

    /**
     * Constructor which sets the default scanner.
     */
    public parserSql(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {
        super(s, sf);
    }

    /**
     * Production table.
     */
    protected static final short _production_table[][]
            = unpackFromStrings(new String[]{
        "\000\152\000\002\002\004\000\002\002\004\000\002\002"
        + "\002\000\002\003\006\000\002\003\006\000\002\003\006"
        + "\000\002\003\006\000\002\003\005\000\002\004\003\000"
        + "\002\004\007\000\002\004\005\000\002\010\005\000\002"
        + "\010\005\000\002\021\005\000\002\021\007\000\002\021"
        + "\005\000\002\021\005\000\002\022\003\000\002\022\003"
        + "\000\002\022\003\000\002\011\006\000\002\011\005\000"
        + "\002\023\004\000\002\023\003\000\002\023\003\000\002"
        + "\006\006\000\002\006\005\000\002\012\012\000\002\012"
        + "\005\000\002\012\005\000\002\013\010\000\002\013\004"
        + "\000\002\013\005\000\002\013\005\000\002\014\003\000"
        + "\002\014\003\000\002\014\004\000\002\015\012\000\002"
        + "\015\005\000\002\015\005\000\002\015\005\000\002\017"
        + "\004\000\002\017\003\000\002\016\012\000\002\016\005"
        + "\000\002\016\005\000\002\016\005\000\002\020\004\000"
        + "\002\020\003\000\002\025\006\000\002\025\005\000\002"
        + "\026\006\000\002\026\005\000\002\027\007\000\002\027"
        + "\005\000\002\027\005\000\002\027\005\000\002\030\011"
        + "\000\002\030\005\000\002\030\005\000\002\030\005\000"
        + "\002\030\005\000\002\030\005\000\002\031\005\000\002"
        + "\031\006\000\002\031\006\000\002\031\005\000\002\032"
        + "\005\000\002\032\005\000\002\032\005\000\002\033\005"
        + "\000\002\033\005\000\002\033\005\000\002\033\005\000"
        + "\002\034\007\000\002\034\005\000\002\034\005\000\002"
        + "\035\014\000\002\035\005\000\002\035\005\000\002\036"
        + "\007\000\002\036\005\000\002\036\005\000\002\037\010"
        + "\000\002\037\004\000\002\037\005\000\002\037\005\000"
        + "\002\037\005\000\002\040\006\000\002\040\003\000\002"
        + "\040\005\000\002\040\005\000\002\041\007\000\002\041"
        + "\005\000\002\041\005\000\002\042\003\000\002\042\005"
        + "\000\002\042\004\000\002\042\005\000\002\005\004\000"
        + "\002\005\002\000\002\007\003\000\002\007\003\000\002"
        + "\007\003\000\002\007\003\000\002\007\003"});

    /**
     * Access to production table.
     */
    public short[][] production_table() {
        return _production_table;
    }

    /**
     * Parse-action table.
     */
    protected static final short[][] _action_table
            = unpackFromStrings(new String[]{
        "\000\u0130\000\016\002\uffff\003\005\004\012\006\007\007"
        + "\011\011\006\001\002\000\016\002\uffff\003\005\004\012"
        + "\006\007\007\011\011\006\001\002\000\012\003\uff9d\020"
        + "\015\034\uff9d\036\uff9d\001\002\000\004\020\u011a\001\002"
        + "\000\004\020\277\001\002\000\004\002\276\001\002\000"
        + "\004\020\211\001\002\000\004\020\013\001\002\000\012"
        + "\003\uff9d\020\015\034\uff9d\036\uff9d\001\002\000\010\003"
        + "\021\034\020\036\017\001\002\000\066\002\uff9d\003\uff9d"
        + "\004\uff9d\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012"
        + "\uff9d\013\uff9d\015\uff9d\016\uff9d\017\uff9d\020\015\021\uff9d"
        + "\022\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030"
        + "\uff9d\031\uff9d\032\uff9d\034\uff9d\036\uff9d\001\002\000\064"
        + "\002\uff9e\003\uff9e\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010"
        + "\uff9e\011\uff9e\012\uff9e\013\uff9e\015\uff9e\016\uff9e\017\uff9e"
        + "\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e\026\uff9e\027"
        + "\uff9e\030\uff9e\031\uff9e\032\uff9e\034\uff9e\036\uff9e\001\002"
        + "\000\012\003\uff9d\015\uff9d\020\015\021\uff9d\001\002\000"
        + "\004\020\160\001\002\000\006\015\025\036\024\001\002"
        + "\000\016\002\ufff9\003\ufff9\004\ufff9\006\ufff9\007\ufff9\011"
        + "\ufff9\001\002\000\016\002\ufffe\003\ufffe\004\ufffe\006\ufffe"
        + "\007\ufffe\011\ufffe\001\002\000\020\002\uff9d\003\uff9d\004"
        + "\uff9d\006\uff9d\007\uff9d\011\uff9d\020\015\001\002\000\006"
        + "\003\026\020\030\001\002\000\004\036\155\001\002\000"
        + "\016\002\ufff7\003\ufff7\004\ufff7\006\ufff7\007\ufff7\011\ufff7"
        + "\001\002\000\006\020\015\036\uff9d\001\002\000\004\036"
        + "\032\001\002\000\010\003\033\020\036\022\uff9d\001\002"
        + "\000\020\002\uffe9\003\uffe9\004\uffe9\005\153\006\uffe9\007"
        + "\uffe9\011\uffe9\001\002\000\016\002\uffed\003\uffed\004\uffed"
        + "\006\uffed\007\uffed\011\uffed\001\002\000\004\022\152\001"
        + "\002\000\012\005\uff9d\020\015\021\uff9d\022\uff9d\001\002"
        + "\000\016\002\uffea\003\uffea\004\uffea\006\uffea\007\uffea\011"
        + "\uffea\001\002\000\010\005\041\021\uff9e\022\uff9e\001\002"
        + "\000\006\003\043\020\044\001\002\000\016\002\uffe8\003"
        + "\uffe8\004\uffe8\006\uffe8\007\uffe8\011\uffe8\001\002\000\014"
        + "\003\uff9d\017\uff9d\020\015\024\uff9d\036\146\001\002\000"
        + "\006\020\015\036\uff9d\001\002\000\004\036\046\001\002"
        + "\000\016\020\015\023\uff9d\027\uff9d\030\uff9d\031\uff9d\032"
        + "\uff9d\001\002\000\014\023\051\027\054\030\053\031\050"
        + "\032\055\001\002\000\024\002\uff99\003\uff99\004\uff99\006"
        + "\uff99\007\uff99\011\uff99\017\uff99\020\uff99\024\uff99\001\002"
        + "\000\024\002\uff9a\003\uff9a\004\uff9a\006\uff9a\007\uff9a\011"
        + "\uff9a\017\uff9a\020\uff9a\024\uff9a\001\002\000\012\003\uff9d"
        + "\017\uff9d\020\015\024\uff9d\001\002\000\024\002\uff9b\003"
        + "\uff9b\004\uff9b\006\uff9b\007\uff9b\011\uff9b\017\uff9b\020\uff9b"
        + "\024\uff9b\001\002\000\024\002\uff9c\003\uff9c\004\uff9c\006"
        + "\uff9c\007\uff9c\011\uff9c\017\uff9c\020\uff9c\024\uff9c\001\002"
        + "\000\024\002\uff98\003\uff98\004\uff98\006\uff98\007\uff98\011"
        + "\uff98\017\uff98\020\uff98\024\uff98\001\002\000\010\003\060"
        + "\017\062\024\061\001\002\000\012\003\076\022\101\025"
        + "\102\026\077\001\002\000\006\017\072\024\071\001\002"
        + "\000\026\002\uff9d\003\uff9d\004\uff9d\006\uff9d\007\uff9d\011"
        + "\uff9d\020\015\022\uff9d\025\uff9d\026\uff9d\001\002\000\006"
        + "\020\015\036\uff9d\001\002\000\004\036\064\001\002\000"
        + "\006\017\uff9d\020\015\001\002\000\004\017\066\001\002"
        + "\000\026\002\uff9d\003\uff9d\004\uff9d\006\uff9d\007\uff9d\011"
        + "\uff9d\020\015\022\uff9d\025\uff9d\026\uff9d\001\002\000\024"
        + "\002\uffe3\003\uffe3\004\uffe3\006\uffe3\007\uffe3\011\uffe3\022"
        + "\uffe3\025\uffe3\026\uffe3\001\002\000\024\002\uffe2\003\uffe2"
        + "\004\uffe2\006\uffe2\007\uffe2\011\uffe2\022\uffe2\025\uffe2\026"
        + "\uffe2\001\002\000\026\002\uff9d\003\uff9d\004\uff9d\006\uff9d"
        + "\007\uff9d\011\uff9d\020\015\022\uff9d\025\uff9d\026\uff9d\001"
        + "\002\000\026\002\uff9d\003\uff9d\004\uff9d\006\uff9d\007\uff9d"
        + "\011\uff9d\020\015\022\uff9d\025\uff9d\026\uff9d\001\002\000"
        + "\024\002\uffe1\003\uffe1\004\uffe1\006\uffe1\007\uffe1\011\uffe1"
        + "\022\uffe1\025\uffe1\026\uffe1\001\002\000\024\002\uffe0\003"
        + "\uffe0\004\uffe0\006\uffe0\007\uffe0\011\uffe0\022\uffe0\025\uffe0"
        + "\026\uffe0\001\002\000\016\002\uffe6\003\uffe6\004\uffe6\006"
        + "\uffe6\007\uffe6\011\uffe6\001\002\000\032\003\uff9d\017\uff9d"
        + "\020\015\023\051\024\uff9d\025\117\026\142\027\054\030"
        + "\053\031\050\032\055\036\141\001\002\000\004\020\126"
        + "\001\002\000\016\002\uffde\003\uffde\004\uffde\006\uffde\007"
        + "\uffde\011\uffde\001\002\000\020\002\uff9d\003\uff9d\004\uff9d"
        + "\006\uff9d\007\uff9d\011\uff9d\020\015\001\002\000\004\020"
        + "\104\001\002\000\016\002\uffdf\003\uffdf\004\uffdf\006\uffdf"
        + "\007\uffdf\011\uffdf\001\002\000\004\036\105\001\002\000"
        + "\016\020\015\023\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d"
        + "\001\002\000\014\023\051\027\054\030\053\031\050\032"
        + "\055\001\002\000\012\003\uff9d\017\uff9d\020\015\024\uff9d"
        + "\001\002\000\010\003\060\017\062\024\061\001\002\000"
        + "\010\003\112\022\114\025\102\001\002\000\026\003\uff9d"
        + "\017\uff9d\020\015\023\051\024\uff9d\025\117\027\054\030"
        + "\053\031\050\032\055\001\002\000\016\002\uffdc\003\uffdc"
        + "\004\uffdc\006\uffdc\007\uffdc\011\uffdc\001\002\000\020\002"
        + "\uff9d\003\uff9d\004\uff9d\006\uff9d\007\uff9d\011\uff9d\020\015"
        + "\001\002\000\016\002\uffd7\003\uffd7\004\uffd7\006\uffd7\007"
        + "\uffd7\011\uffd7\001\002\000\016\002\uffd8\003\uffd8\004\uffd8"
        + "\006\uffd8\007\uffd8\011\uffd8\001\002\000\020\002\uff9d\003"
        + "\uff9d\004\uff9d\006\uff9d\007\uff9d\011\uff9d\020\015\001\002"
        + "\000\010\003\060\017\062\024\061\001\002\000\010\003"
        + "\060\017\062\024\061\001\002\000\016\002\uffda\003\uffda"
        + "\004\uffda\006\uffda\007\uffda\011\uffda\001\002\000\016\002"
        + "\uffd9\003\uffd9\004\uffd9\006\uffd9\007\uffd9\011\uffd9\001\002"
        + "\000\016\002\uffdb\003\uffdb\004\uffdb\006\uffdb\007\uffdb\011"
        + "\uffdb\001\002\000\016\002\uffdd\003\uffdd\004\uffdd\006\uffdd"
        + "\007\uffdd\011\uffdd\001\002\000\004\036\127\001\002\000"
        + "\016\020\015\023\uff9d\027\uff9d\030\uff9d\031\uff9d\032\uff9d"
        + "\001\002\000\014\023\051\027\054\030\053\031\050\032"
        + "\055\001\002\000\012\003\uff9d\017\uff9d\020\015\024\uff9d"
        + "\001\002\000\010\003\060\017\062\024\061\001\002\000"
        + "\010\003\134\022\136\026\077\001\002\000\006\026\142"
        + "\036\141\001\002\000\016\002\uffd6\003\uffd6\004\uffd6\006"
        + "\uffd6\007\uffd6\011\uffd6\001\002\000\020\002\uff9d\003\uff9d"
        + "\004\uff9d\006\uff9d\007\uff9d\011\uff9d\020\015\001\002\000"
        + "\016\002\uffd1\003\uffd1\004\uffd1\006\uffd1\007\uffd1\011\uffd1"
        + "\001\002\000\016\002\uffd2\003\uffd2\004\uffd2\006\uffd2\007"
        + "\uffd2\011\uffd2\001\002\000\032\002\uff9d\003\uff9d\004\uff9d"
        + "\006\uff9d\007\uff9d\011\uff9d\020\015\023\051\027\054\030"
        + "\053\031\050\032\055\001\002\000\004\020\143\001\002"
        + "\000\016\002\uffd5\003\uffd5\004\uffd5\006\uffd5\007\uffd5\011"
        + "\uffd5\001\002\000\016\002\uffd3\003\uffd3\004\uffd3\006\uffd3"
        + "\007\uffd3\011\uffd3\001\002\000\016\002\uffd4\003\uffd4\004"
        + "\uffd4\006\uffd4\007\uffd4\011\uffd4\001\002\000\020\002\uff9d"
        + "\003\uff9d\004\uff9d\006\uff9d\007\uff9d\011\uff9d\020\015\001"
        + "\002\000\010\003\060\017\062\024\061\001\002\000\016"
        + "\002\uffe5\003\uffe5\004\uffe5\006\uffe5\007\uffe5\011\uffe5\001"
        + "\002\000\016\002\uffe4\003\uffe4\004\uffe4\006\uffe4\007\uffe4"
        + "\011\uffe4\001\002\000\016\002\uffeb\003\uffeb\004\uffeb\006"
        + "\uffeb\007\uffeb\011\uffeb\001\002\000\006\003\043\020\044"
        + "\001\002\000\016\002\uffe7\003\uffe7\004\uffe7\006\uffe7\007"
        + "\uffe7\011\uffe7\001\002\000\010\003\033\020\036\022\uff9d"
        + "\001\002\000\016\002\uffec\003\uffec\004\uffec\006\uffec\007"
        + "\uffec\011\uffec\001\002\000\016\002\ufff5\003\ufff5\004\ufff5"
        + "\006\ufff5\007\ufff5\011\ufff5\001\002\000\006\015\uff9d\020"
        + "\015\001\002\000\004\015\162\001\002\000\006\003\026"
        + "\020\030\001\002\000\016\002\ufff8\003\ufff8\004\ufff8\006"
        + "\ufff8\007\ufff8\011\ufff8\001\002\000\010\003\167\015\166"
        + "\021\165\001\002\000\010\003\uff9d\020\015\036\uff9d\001"
        + "\002\000\004\020\203\001\002\000\006\021\171\036\172"
        + "\001\002\000\016\002\ufff6\003\ufff6\004\ufff6\006\ufff6\007"
        + "\ufff6\011\ufff6\001\002\000\006\003\201\036\017\001\002"
        + "\000\010\003\173\020\175\022\176\001\002\000\020\002"
        + "\uffee\003\uffee\004\uffee\005\153\006\uffee\007\uffee\011\uffee"
        + "\001\002\000\016\002\ufff1\003\ufff1\004\ufff1\006\ufff1\007"
        + "\ufff1\011\ufff1\001\002\000\006\005\uff9d\020\015\001\002"
        + "\000\016\002\ufff0\003\ufff0\004\ufff0\006\ufff0\007\ufff0\011"
        + "\ufff0\001\002\000\016\002\uffef\003\uffef\004\uffef\006\uffef"
        + "\007\uffef\011\uffef\001\002\000\004\005\041\001\002\000"
        + "\004\036\024\001\002\000\016\002\ufff2\003\ufff2\004\ufff2"
        + "\006\ufff2\007\ufff2\011\ufff2\001\002\000\006\020\015\036"
        + "\uff9d\001\002\000\004\036\205\001\002\000\010\003\173"
        + "\020\175\022\176\001\002\000\016\002\ufff3\003\ufff3\004"
        + "\ufff3\006\ufff3\007\ufff3\011\ufff3\001\002\000\006\003\201"
        + "\036\017\001\002\000\016\002\ufff4\003\ufff4\004\ufff4\006"
        + "\ufff4\007\ufff4\011\ufff4\001\002\000\010\003\uff9d\015\uff9d"
        + "\020\015\001\002\000\006\003\214\015\213\001\002\000"
        + "\004\020\265\001\002\000\006\010\217\020\216\001\002"
        + "\000\016\002\ufffc\003\ufffc\004\ufffc\006\ufffc\007\ufffc\011"
        + "\ufffc\001\002\000\020\002\uff9d\003\uff9d\004\uff9d\006\uff9d"
        + "\007\uff9d\011\uff9d\020\015\001\002\000\006\003\221\036"
        + "\220\001\002\000\016\020\015\023\uff9d\027\uff9d\030\uff9d"
        + "\031\uff9d\032\uff9d\001\002\000\016\023\051\027\054\030"
        + "\053\031\050\032\055\036\223\001\002\000\016\002\uffb2"
        + "\003\uffb2\004\uffb2\006\uffb2\007\uffb2\011\uffb2\001\002\000"
        + "\020\002\uff9d\003\uff9d\004\uff9d\006\uff9d\007\uff9d\011\uff9d"
        + "\020\015\001\002\000\010\003\225\017\230\024\226\001"
        + "\002\000\010\017\253\024\252\036\251\001\002\000\012"
        + "\003\235\020\036\021\uff9d\022\uff9d\001\002\000\016\002"
        + "\uffaf\003\uffaf\004\uffaf\006\uffaf\007\uffaf\011\uffaf\001\002"
        + "\000\006\020\015\036\uff9d\001\002\000\004\036\232\001"
        + "\002\000\006\017\uff9d\020\015\001\002\000\004\017\234"
        + "\001\002\000\012\003\235\020\036\021\uff9d\022\uff9d\001"
        + "\002\000\012\003\uff9d\005\153\020\015\036\uff9d\001\002"
        + "\000\016\002\uffae\003\uffae\004\uffae\006\uffae\007\uffae\011"
        + "\uffae\001\002\000\006\021\241\022\242\001\002\000\016"
        + "\002\uffa8\003\uffa8\004\uffa8\006\uffa8\007\uffa8\011\uffa8\001"
        + "\002\000\010\003\uff9d\020\015\036\uff9d\001\002\000\020"
        + "\002\uff9d\003\uff9d\004\uff9d\006\uff9d\007\uff9d\011\uff9d\020"
        + "\015\001\002\000\016\002\uffa7\003\uffa7\004\uffa7\006\uffa7"
        + "\007\uffa7\011\uffa7\001\002\000\006\003\221\036\220\001"
        + "\002\000\016\002\uffa9\003\uffa9\004\uffa9\006\uffa9\007\uffa9"
        + "\011\uffa9\001\002\000\006\003\221\036\220\001\002\000"
        + "\016\002\uffa6\003\uffa6\004\uffa6\006\uffa6\007\uffa6\011\uffa6"
        + "\001\002\000\016\002\uffad\003\uffad\004\uffad\006\uffad\007"
        + "\uffad\011\uffad\001\002\000\020\002\uff9d\003\uff9d\004\uff9d"
        + "\006\uff9d\007\uff9d\011\uff9d\020\015\001\002\000\012\003"
        + "\235\020\036\021\uff9d\022\uff9d\001\002\000\020\002\uff9d"
        + "\003\uff9d\004\uff9d\006\uff9d\007\uff9d\011\uff9d\020\015\001"
        + "\002\000\016\002\uffac\003\uffac\004\uffac\006\uffac\007\uffac"
        + "\011\uffac\001\002\000\016\002\uffaa\003\uffaa\004\uffaa\006"
        + "\uffaa\007\uffaa\011\uffaa\001\002\000\016\002\uffab\003\uffab"
        + "\004\uffab\006\uffab\007\uffab\011\uffab\001\002\000\016\002"
        + "\uffb0\003\uffb0\004\uffb0\006\uffb0\007\uffb0\011\uffb0\001\002"
        + "\000\014\023\051\027\054\030\053\031\050\032\055\001"
        + "\002\000\012\003\uff9d\017\uff9d\020\015\024\uff9d\001\002"
        + "\000\010\003\225\017\230\024\226\001\002\000\016\002"
        + "\uffb1\003\uffb1\004\uffb1\006\uffb1\007\uffb1\011\uffb1\001\002"
        + "\000\016\002\uffb3\003\uffb3\004\uffb3\006\uffb3\007\uffb3\011"
        + "\uffb3\001\002\000\006\020\015\036\uff9d\001\002\000\004"
        + "\036\267\001\002\000\004\020\270\001\002\000\006\010"
        + "\uff9d\020\015\001\002\000\004\010\272\001\002\000\004"
        + "\020\273\001\002\000\010\003\uff9d\020\015\036\uff9d\001"
        + "\002\000\006\003\221\036\220\001\002\000\016\002\uffb4"
        + "\003\uffb4\004\uffb4\006\uffb4\007\uffb4\011\uffb4\001\002\000"
        + "\004\002\001\001\002\000\010\003\uff9d\015\uff9d\020\015"
        + "\001\002\000\006\003\302\015\301\001\002\000\004\020"
        + "\u0117\001\002\000\004\020\304\001\002\000\016\002\ufffd"
        + "\003\ufffd\004\ufffd\006\ufffd\007\ufffd\011\ufffd\001\002\000"
        + "\006\003\306\036\305\001\002\000\004\020\u0114\001\002"
        + "\000\004\020\310\001\002\000\016\002\uffcf\003\uffcf\004"
        + "\uffcf\006\uffcf\007\uffcf\011\uffcf\001\002\000\010\003\312"
        + "\012\314\016\311\001\002\000\006\012\uff9d\020\015\001"
        + "\002\000\014\003\uff9d\012\u010d\017\uff9d\020\015\024\uff9d"
        + "\001\002\000\016\002\uffcd\003\uffcd\004\uffcd\006\uffcd\007"
        + "\uffcd\011\uffcd\001\002\000\010\003\uff9d\020\015\036\uff9d"
        + "\001\002\000\006\003\320\036\316\001\002\000\012\003"
        + "\uff9d\013\uff9d\020\015\021\uff9d\001\002\000\016\002\uffcb"
        + "\003\uffcb\004\uffcb\006\uffcb\007\uffcb\011\uffcb\001\002\000"
        + "\014\003\uff9d\013\uff9d\020\015\021\uff9d\036\321\001\002"
        + "\000\020\002\uff9d\003\uff9d\004\uff9d\006\uff9d\007\uff9d\011"
        + "\uff9d\020\015\001\002\000\010\003\325\013\326\021\323"
        + "\001\002\000\010\003\uff9d\020\015\036\uff9d\001\002\000"
        + "\016\002\uffbd\003\uffbd\004\uffbd\006\uffbd\007\uffbd\011\uffbd"
        + "\001\002\000\012\003\uff9d\020\015\021\u0103\036\uff9d\001"
        + "\002\000\010\003\uff9d\016\uff9d\020\015\001\002\000\006"
        + "\003\331\016\330\001\002\000\006\012\uff9d\020\015\001"
        + "\002\000\014\003\uff9d\012\334\017\uff9d\020\015\024\uff9d"
        + "\001\002\000\016\002\uffba\003\uffba\004\uffba\006\uffba\007"
        + "\uffba\011\uffba\001\002\000\010\003\336\017\340\024\337"
        + "\001\002\000\010\003\336\017\340\024\337\001\002\000"
        + "\016\002\uffb5\003\uffb5\004\uffb5\006\uffb5\007\uffb5\011\uffb5"
        + "\001\002\000\020\003\uff9d\013\uff9d\017\371\020\015\021"
        + "\uff9d\024\367\036\366\001\002\000\012\003\uff9d\013\uff9d"
        + "\020\015\021\uff9d\001\002\000\006\020\015\036\uff9d\001"
        + "\002\000\004\036\342\001\002\000\006\017\uff9d\020\015"
        + "\001\002\000\004\017\344\001\002\000\012\003\uff9d\013"
        + "\uff9d\020\015\021\uff9d\001\002\000\010\003\350\013\351"
        + "\021\346\001\002\000\012\003\uff9d\017\uff9d\020\015\024"
        + "\uff9d\001\002\000\016\002\uffc8\003\uffc8\004\uffc8\006\uffc8"
        + "\007\uffc8\011\uffc8\001\002\000\014\003\uff9d\017\uff9d\020"
        + "\015\021\355\024\uff9d\001\002\000\006\020\015\022\uff9d"
        + "\001\002\000\004\022\353\001\002\000\020\002\uff9d\003"
        + "\uff9d\004\uff9d\006\uff9d\007\uff9d\011\uff9d\020\015\001\002"
        + "\000\016\002\uffc1\003\uffc1\004\uffc1\006\uffc1\007\uffc1\011"
        + "\uffc1\001\002\000\012\003\uff9d\017\uff9d\020\015\024\uff9d"
        + "\001\002\000\010\003\336\017\340\024\337\001\002\000"
        + "\016\002\uffbf\003\uffbf\004\uffbf\006\uffbf\007\uffbf\011\uffbf"
        + "\001\002\000\010\003\336\017\340\024\337\001\002\000"
        + "\016\002\uffc0\003\uffc0\004\uffc0\006\uffc0\007\uffc0\011\uffc0"
        + "\001\002\000\010\003\336\017\340\024\337\001\002\000"
        + "\016\002\uffc2\003\uffc2\004\uffc2\006\uffc2\007\uffc2\011\uffc2"
        + "\001\002\000\010\003\350\013\351\021\346\001\002\000"
        + "\016\002\uffc7\003\uffc7\004\uffc7\006\uffc7\007\uffc7\011\uffc7"
        + "\001\002\000\020\002\uff9d\003\uff9d\004\uff9d\006\uff9d\007"
        + "\uff9d\011\uff9d\020\015\001\002\000\010\003\350\013\351"
        + "\021\346\001\002\000\010\003\350\013\351\021\346\001"
        + "\002\000\010\003\350\013\351\021\346\001\002\000\016"
        + "\002\uffc5\003\uffc5\004\uffc5\006\uffc5\007\uffc5\011\uffc5\001"
        + "\002\000\016\002\uffc4\003\uffc4\004\uffc4\006\uffc4\007\uffc4"
        + "\011\uffc4\001\002\000\016\002\uffc3\003\uffc3\004\uffc3\006"
        + "\uffc3\007\uffc3\011\uffc3\001\002\000\016\002\uffc6\003\uffc6"
        + "\004\uffc6\006\uffc6\007\uffc6\011\uffc6\001\002\000\016\002"
        + "\uffb6\003\uffb6\004\uffb6\006\uffb6\007\uffb6\011\uffb6\001\002"
        + "\000\004\012\u0100\001\002\000\012\003\uff9d\017\uff9d\020"
        + "\015\024\uff9d\001\002\000\010\003\336\017\340\024\337"
        + "\001\002\000\016\002\uffb7\003\uffb7\004\uffb7\006\uffb7\007"
        + "\uffb7\011\uffb7\001\002\000\020\002\uff9d\003\uff9d\004\uff9d"
        + "\006\uff9d\007\uff9d\011\uff9d\020\015\001\002\000\006\003"
        + "\320\036\316\001\002\000\016\002\uffb9\003\uffb9\004\uffb9"
        + "\006\uffb9\007\uffb9\011\uffb9\001\002\000\016\002\uffb8\003"
        + "\uffb8\004\uffb8\006\uffb8\007\uffb8\011\uffb8\001\002\000\006"
        + "\003\320\036\316\001\002\000\016\002\uffbb\003\uffbb\004"
        + "\uffbb\006\uffbb\007\uffbb\011\uffbb\001\002\000\016\002\uffbc"
        + "\003\uffbc\004\uffbc\006\uffbc\007\uffbc\011\uffbc\001\002\000"
        + "\010\003\325\013\326\021\323\001\002\000\016\002\uffbe"
        + "\003\uffbe\004\uffbe\006\uffbe\007\uffbe\011\uffbe\001\002\000"
        + "\010\003\336\017\340\024\337\001\002\000\006\003\320"
        + "\036\316\001\002\000\016\002\uffc9\003\uffc9\004\uffc9\006"
        + "\uffc9\007\uffc9\011\uffc9\001\002\000\016\002\uffca\003\uffca"
        + "\004\uffca\006\uffca\007\uffca\011\uffca\001\002\000\004\012"
        + "\u0111\001\002\000\012\003\uff9d\017\uff9d\020\015\024\uff9d"
        + "\001\002\000\010\003\336\017\340\024\337\001\002\000"
        + "\016\002\uffcc\003\uffcc\004\uffcc\006\uffcc\007\uffcc\011\uffcc"
        + "\001\002\000\012\003\uff9d\012\uff9d\016\uff9d\020\015\001"
        + "\002\000\010\003\312\012\314\016\311\001\002\000\016"
        + "\002\uffce\003\uffce\004\uffce\006\uffce\007\uffce\011\uffce\001"
        + "\002\000\010\003\uff9d\020\015\036\uff9d\001\002\000\006"
        + "\003\306\036\305\001\002\000\016\002\uffd0\003\uffd0\004"
        + "\uffd0\006\uffd0\007\uffd0\011\uffd0\001\002\000\010\003\uff9d"
        + "\015\uff9d\020\015\001\002\000\006\003\u011d\015\u011c\001"
        + "\002\000\004\020\u012c\001\002\000\006\015\u0120\036\u011f"
        + "\001\002\000\016\002\ufffb\003\ufffb\004\ufffb\006\ufffb\007"
        + "\ufffb\011\ufffb\001\002\000\010\003\u0122\020\036\022\uff9d"
        + "\001\002\000\020\002\uff9d\003\uff9d\004\uff9d\006\uff9d\007"
        + "\uff9d\011\uff9d\020\015\001\002\000\016\002\uffa4\003\uffa4"
        + "\004\uffa4\006\uffa4\007\uffa4\011\uffa4\001\002\000\012\003"
        + "\u0128\005\153\020\175\022\u012a\001\002\000\004\022\u0126"
        + "\001\002\000\016\002\uffa3\003\uffa3\004\uffa3\006\uffa3\007"
        + "\uffa3\011\uffa3\001\002\000\016\002\uffa2\003\uffa2\004\uffa2"
        + "\006\uffa2\007\uffa2\011\uffa2\001\002\000\020\002\uff9d\003"
        + "\uff9d\004\uff9d\006\uff9d\007\uff9d\011\uff9d\020\015\001\002"
        + "\000\016\002\uffa1\003\uffa1\004\uffa1\006\uffa1\007\uffa1\011"
        + "\uffa1\001\002\000\004\005\153\001\002\000\016\002\uffa0"
        + "\003\uffa0\004\uffa0\006\uffa0\007\uffa0\011\uffa0\001\002\000"
        + "\020\002\uff9d\003\uff9d\004\uff9d\006\uff9d\007\uff9d\011\uff9d"
        + "\020\015\001\002\000\016\002\uff9f\003\uff9f\004\uff9f\006"
        + "\uff9f\007\uff9f\011\uff9f\001\002\000\006\020\015\036\uff9d"
        + "\001\002\000\004\036\u012e\001\002\000\010\003\u0122\020"
        + "\036\022\uff9d\001\002\000\016\002\uffa5\003\uffa5\004\uffa5"
        + "\006\uffa5\007\uffa5\011\uffa5\001\002\000\010\003\021\034"
        + "\020\036\017\001\002\000\016\002\ufffa\003\ufffa\004\ufffa"
        + "\006\ufffa\007\ufffa\011\ufffa\001\002\000\004\002\000\001"
        + "\002"});

    /**
     * Access to parse-action table.
     */
    public short[][] action_table() {
        return _action_table;
    }

    /** <code>reduce_goto</code> table.
     */
    protected static final short[][] _reduce_table
            = unpackFromStrings(new String[]{
        "\000\u0130\000\006\002\007\003\003\001\001\000\006\002"
        + "\u0131\003\003\001\001\000\004\005\u012f\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\005\013\001\001\000\006"
        + "\004\022\010\021\001\001\000\004\005\015\001\001\000"
        + "\002\001\001\000\004\005\163\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\004\005\156\001\001\000\004\011\026\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\005\030\001\001\000"
        + "\002\001\001\000\010\005\034\006\036\023\033\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\004\005\037\001\001\000\002\001\001\000\002\001\001"
        + "\000\004\012\041\001\001\000\002\001\001\000\004\005"
        + "\146\001\001\000\004\005\044\001\001\000\002\001\001"
        + "\000\004\005\046\001\001\000\004\007\051\001\001\000"
        + "\002\001\001\000\002\001\001\000\004\005\055\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\004\013\056\001\001\000\010\014\074\015\102\016\077"
        + "\001\001\000\002\001\001\000\004\005\067\001\001\000"
        + "\004\005\062\001\001\000\002\001\001\000\004\005\064"
        + "\001\001\000\002\001\001\000\004\005\066\001\001\000"
        + "\002\001\001\000\002\001\001\000\004\005\073\001\001"
        + "\000\004\005\072\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\006\005\120\007\117\001\001"
        + "\000\002\001\001\000\002\001\001\000\004\005\124\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\004\005\105\001\001\000\004\007\106\001\001\000"
        + "\004\005\107\001\001\000\004\013\110\001\001\000\006"
        + "\015\114\017\112\001\001\000\006\005\120\007\117\001"
        + "\001\000\002\001\001\000\004\005\115\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\005\123\001\001\000"
        + "\004\013\122\001\001\000\004\013\121\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\005\127\001\001\000\004"
        + "\007\130\001\001\000\004\005\131\001\001\000\004\013"
        + "\132\001\001\000\006\016\136\020\134\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\005\137\001\001\000"
        + "\002\001\001\000\002\001\001\000\006\005\144\007\143"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\005\150\001\001\000\004"
        + "\013\147\001\001\000\002\001\001\000\002\001\001\000"
        + "\002\001\001\000\004\012\153\001\001\000\002\001\001"
        + "\000\010\005\034\006\036\023\155\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\005\160\001\001\000\002"
        + "\001\001\000\004\011\162\001\001\000\002\001\001\000"
        + "\004\021\167\001\001\000\004\005\206\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\010"
        + "\201\001\001\000\006\006\176\022\173\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\005\177\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\005\203\001\001\000"
        + "\002\001\001\000\006\006\176\022\205\001\001\000\002"
        + "\001\001\000\004\010\207\001\001\000\002\001\001\000"
        + "\004\005\211\001\001\000\004\035\214\001\001\000\002"
        + "\001\001\000\002\001\001\000\002\001\001\000\004\005"
        + "\263\001\001\000\004\036\221\001\001\000\004\005\257"
        + "\001\001\000\004\007\223\001\001\000\002\001\001\000"
        + "\004\005\256\001\001\000\004\037\226\001\001\000\002"
        + "\001\001\000\010\005\236\006\237\040\247\001\001\000"
        + "\002\001\001\000\004\005\230\001\001\000\002\001\001"
        + "\000\004\005\232\001\001\000\002\001\001\000\010\005"
        + "\236\006\237\040\235\001\001\000\004\005\245\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\004\005\243\001\001\000\004\005\242\001\001\000\002"
        + "\001\001\000\004\036\244\001\001\000\002\001\001\000"
        + "\004\036\246\001\001\000\002\001\001\000\002\001\001"
        + "\000\004\005\255\001\001\000\010\005\236\006\237\040"
        + "\254\001\001\000\004\005\253\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\004\007\260\001\001\000\004\005\261\001\001\000\004"
        + "\037\262\001\001\000\002\001\001\000\002\001\001\000"
        + "\004\005\265\001\001\000\002\001\001\000\002\001\001"
        + "\000\004\005\270\001\001\000\002\001\001\000\002\001"
        + "\001\000\004\005\273\001\001\000\004\036\274\001\001"
        + "\000\002\001\001\000\002\001\001\000\004\005\277\001"
        + "\001\000\004\025\302\001\001\000\002\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\026\306\001\001\000"
        + "\002\001\001\000\002\001\001\000\002\001\001\000\004"
        + "\027\312\001\001\000\004\005\u010f\001\001\000\004\005"
        + "\u010b\001\001\000\002\001\001\000\004\005\314\001\001"
        + "\000\004\032\316\001\001\000\004\005\u0109\001\001\000"
        + "\002\001\001\000\004\005\321\001\001\000\004\005\u0108"
        + "\001\001\000\004\033\323\001\001\000\004\005\u0106\001"
        + "\001\000\002\001\001\000\004\005\u0103\001\001\000\004"
        + "\005\326\001\001\000\004\034\331\001\001\000\004\005"
        + "\376\001\001\000\004\005\332\001\001\000\002\001\001"
        + "\000\004\030\375\001\001\000\004\030\334\001\001\000"
        + "\002\001\001\000\004\005\367\001\001\000\004\005\363"
        + "\001\001\000\004\005\340\001\001\000\002\001\001\000"
        + "\004\005\342\001\001\000\002\001\001\000\004\005\344"
        + "\001\001\000\004\031\346\001\001\000\004\005\361\001"
        + "\001\000\002\001\001\000\004\005\355\001\001\000\004"
        + "\005\351\001\001\000\002\001\001\000\004\005\353\001"
        + "\001\000\002\001\001\000\004\005\357\001\001\000\004"
        + "\030\356\001\001\000\002\001\001\000\004\030\360\001"
        + "\001\000\002\001\001\000\004\030\362\001\001\000\002"
        + "\001\001\000\004\031\364\001\001\000\002\001\001\000"
        + "\004\005\374\001\001\000\004\031\373\001\001\000\004"
        + "\031\372\001\001\000\004\031\371\001\001\000\002\001"
        + "\001\000\002\001\001\000\002\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\004\005\u0100\001"
        + "\001\000\004\030\u0101\001\001\000\002\001\001\000\004"
        + "\005\u0105\001\001\000\004\032\u0104\001\001\000\002\001"
        + "\001\000\002\001\001\000\004\032\u0107\001\001\000\002"
        + "\001\001\000\002\001\001\000\004\033\u010a\001\001\000"
        + "\002\001\001\000\004\030\u010e\001\001\000\004\032\u010d"
        + "\001\001\000\002\001\001\000\002\001\001\000\002\001"
        + "\001\000\004\005\u0111\001\001\000\004\030\u0112\001\001"
        + "\000\002\001\001\000\004\005\u0114\001\001\000\004\027"
        + "\u0115\001\001\000\002\001\001\000\004\005\u0117\001\001"
        + "\000\004\026\u0118\001\001\000\002\001\001\000\004\005"
        + "\u011a\001\001\000\004\041\u011d\001\001\000\002\001\001"
        + "\000\002\001\001\000\002\001\001\000\010\005\u0122\006"
        + "\u0124\042\u0123\001\001\000\004\005\u0120\001\001\000\002"
        + "\001\001\000\004\006\u0128\001\001\000\002\001\001\000"
        + "\002\001\001\000\002\001\001\000\004\005\u0126\001\001"
        + "\000\002\001\001\000\002\001\001\000\002\001\001\000"
        + "\004\005\u012a\001\001\000\002\001\001\000\004\005\u012c"
        + "\001\001\000\002\001\001\000\010\005\u0122\006\u0124\042"
        + "\u012e\001\001\000\002\001\001\000\006\004\u0130\010\021"
        + "\001\001\000\002\001\001\000\002\001\001"});

    /**
     * Access to <code>reduce_goto</code> table.
     */
    public short[][] reduce_table() {
        return _reduce_table;
    }

    /**
     * Instance of action encapsulation class.
     */
    protected CUP$parserSql$actions action_obj;

    /**
     * Action encapsulation object initializer.
     */
    protected void init_actions() {
        action_obj = new CUP$parserSql$actions(this);
    }

    /**
     * Invoke a user supplied parse action.
     */
    public java_cup.runtime.Symbol do_action(
            int act_num,
            java_cup.runtime.lr_parser parser,
            java.util.Stack stack,
            int top)
            throws java.lang.Exception {
        /* call code in generated class */
        return action_obj.CUP$parserSql$do_action(act_num, parser, stack, top);
    }

    /**
     * Indicates start state.
     */
    public int start_state() {
        return 0;
    }

    /**
     * Indicates start production.
     */
    public int start_production() {
        return 0;
    }

    /** <code>EOF</code> Symbol index.
     */
    public int EOF_sym() {
        return 0;
    }

    /** <code>error</code> Symbol index.
     */
    public int error_sym() {
        return 1;
    }

//Codigo visible
    public static ArrayList<String> arraycolumnas;
    public static ArrayList<String> arrayvalores;
    public static ArrayList<condiciones> arraycon;
    public static ArrayList<asignaciones> arrayasig;
    public static ArrayList<sql> consultas;
    public static ArrayList<Symbol> erroresSintaticos;
//----------------------->
/*    public static ArrayList<ArrayList> conditions;
    public static ArrayList<ArrayList> colums;
    public static ArrayList<ArrayList> values;
    public static ArrayList<ArrayList> asig;*/

    public void syntax_error(Symbol s) {
        System.out.println("Error R de sintaxis: " + s.value + " Linea " + (s.left + 1) + " columna " + (s.right + 1));
        erroresSintaticos.add(s);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s) {
        erroresSintaticos.add(s);
        System.out.println("La Cadena:" + s.value + " en la Linea:" + (s.right + 1) + " ,Columna: " + s.left + "esta fuera de contexto.");
    }

}

/**
 * Cup generated class to encapsulate user supplied action code.
 */
class CUP$parserSql$actions {

    private final parserSql parser;

    /**
     * Constructor
     */
    CUP$parserSql$actions(parserSql parser) {
        this.parser = parser;
    }

    /**
     * Method with the actual generated action code.
     */
    public final java_cup.runtime.Symbol CUP$parserSql$do_action(
            int CUP$parserSql$act_num,
            java_cup.runtime.lr_parser CUP$parserSql$parser,
            java.util.Stack CUP$parserSql$stack,
            int CUP$parserSql$top)
            throws java.lang.Exception {
        /* Symbol object for return from actions */
        java_cup.runtime.Symbol CUP$parserSql$result;

        /* select the action based on the action number */
        switch (CUP$parserSql$act_num) {
            /*. . . . . . . . . . . . . . . . . . . .*/
            case 105: // equals ::= MEI 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).value;
                RESULT = (String) e;
                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("equals", 5, ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 104: // equals ::= MAI 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).value;
                RESULT = (String) e;
                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("equals", 5, ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 103: // equals ::= IGUAL 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).value;
                RESULT = (String) e;
                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("equals", 5, ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 102: // equals ::= MENOR 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).value;
                RESULT = (String) e;
                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("equals", 5, ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 101: // equals ::= MAYOR 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).value;
                RESULT = (String) e;
                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("equals", 5, ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 100: // espacios ::= 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("espacios", 3, ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 99: // espacios ::= SPACE espacios 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("espacios", 3, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 98: // d2 ::= error END espacios 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("d2", 32, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 97: // d2 ::= error filtrar 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("d2", 32, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 96: // d2 ::= espacios END espacios 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("d2", 32, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 95: // d2 ::= filtrar 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("d2", 32, ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 94: // d1 ::= error ID d2 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("d1", 31, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 93: // d1 ::= error IN espacios 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("d1", 31, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 92: // d1 ::= IN SPACE espacios ID d2 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).right;
                String e = (String) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).value;
                RESULT = (String) e;
                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("d1", 31, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 4)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 91: // u4 ::= error espacios u2 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("u4", 30, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 90: // u4 ::= espacios END espacios 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("u4", 30, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 89: // u4 ::= filtrar 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("u4", 30, ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 88: // u4 ::= espacios COMA espacios u2 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("u4", 30, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 87: // u3 ::= error NUMBER u4 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("u3", 29, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 86: // u3 ::= error ID espacios 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("u3", 29, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 85: // u3 ::= error COMILLAS espacios 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("u3", 29, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 84: // u3 ::= NUMBER u4 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).value;
                RESULT = e;
                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("u3", 29, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 83: // u3 ::= COMILLAS espacios ID espacios COMILLAS u4 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).right;
                String e = (String) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).value;
                RESULT = e;
                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("u3", 29, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 5)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 82: // u2 ::= error equals u3 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("u2", 28, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 81: // u2 ::= error ID espacios 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("u2", 28, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 80: // u2 ::= ID espacios equals espacios u3 
            {
                Object RESULT = null;
                int e1left = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 4)).left;
                int e1right = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 4)).right;
                String e1 = (String) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 4)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)).right;
                Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)).value;
                int e3left = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).left;
                int e3right = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).right;
                Object e3 = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).value;

                arrayasig.add(new asignaciones((String) e1, (String) e3, (String) e2,""));

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("u2", 28, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 4)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 79: // u1 ::= error ASIG u2 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("u1", 27, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 78: // u1 ::= error SPACE espacios 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("u1", 27, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 77: // u1 ::= IN SPACE espacios ID SPACE espacios ASIG SPACE espacios u2 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 6)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 6)).right;
                String e = (String) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 6)).value;
                RESULT = e;
                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("u1", 27, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 9)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 76: // i8 ::= error PA i4 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i8", 26, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 75: // i8 ::= error espacios i4 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i8", 26, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 74: // i8 ::= VALUES espacios PA espacios i4 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i8", 26, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 4)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 73: // i7 ::= error COMA espacios 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i7", 25, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 72: // i7 ::= error espacios i6 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i7", 25, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 71: // i7 ::= PC espacios i8 
            {
                Object RESULT = null;
                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i7", 25, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 70: // i7 ::= COMA espacios i6 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i7", 25, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 69: // i6 ::= error ID espacios 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i6", 24, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 68: // i6 ::= error espacios i7 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i6", 24, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 67: // i6 ::= ID espacios i7 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)).right;
                String e = (String) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)).value;
                arraycolumnas.add(e);

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i6", 24, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 66: // i5 ::= error espacios i4 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i5", 23, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 65: // i5 ::= error COMA espacios i4 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i5", 23, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 64: // i5 ::= PC espacios END espacios 
            {
                Object RESULT = null;
                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i5", 23, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 63: // i5 ::= COMA espacios i4 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i5", 23, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 62: // i4 ::= error NUMBER i5 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i4", 22, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 61: // i4 ::= error espacios i5 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i4", 22, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 60: // i4 ::= error COMILLAS i5 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i4", 22, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 59: // i4 ::= error ID espacios 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i4", 22, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 58: // i4 ::= NUMBER espacios i5 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)).value;

                arrayvalores.add((String) e);

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i4", 22, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 57: // i4 ::= COMILLAS espacios ID espacios COMILLAS espacios i5 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 4)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 4)).right;
                String e = (String) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 4)).value;

                arrayvalores.add(e);

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i4", 22, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 6)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 56: // i3 ::= error PA i6 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i3", 21, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 55: // i3 ::= error espacios i4 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i3", 21, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 54: // i3 ::= PA espacios i6 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i3", 21, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 53: // i3 ::= VALUES espacios PA espacios i4 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i3", 21, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 4)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 52: // i2 ::= error SPACE i3 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i2", 20, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 51: // i2 ::= ID SPACE espacios i3 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).right;
                String e = (String) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).value;
                RESULT = e;
                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i2", 20, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 50: // i1 ::= error SPACE i2 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i1", 19, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 49: // i1 ::= IN SPACE espacios i2 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).value;
                RESULT = e;
                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("i1", 19, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 48: // s9 ::= s7 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s9", 14, ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 47: // s9 ::= END espacios 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s9", 14, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 46: // s7 ::= error ID equals 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s7", 12, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 45: // s7 ::= error ID espacios 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s7", 12, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 44: // s7 ::= error O SPACE 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s7", 12, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 43: // s7 ::= O SPACE ID espacios equals espacios s4 s9 
                       {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserSql$stack.elementAt(CUP$parserSql$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserSql$stack.elementAt(CUP$parserSql$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top-5)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserSql$stack.elementAt(CUP$parserSql$top-3)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserSql$stack.elementAt(CUP$parserSql$top-3)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserSql$stack.elementAt(CUP$parserSql$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserSql$stack.elementAt(CUP$parserSql$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top-1)).value;
		
 condiciones tmp=new condiciones((String)c,(String)v,(String)op,"OR");
      arraycon.add(tmp);

              CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s7",12, ((java_cup.runtime.Symbol)CUP$parserSql$stack.elementAt(CUP$parserSql$top-7)), ((java_cup.runtime.Symbol)CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 42: // s8 ::= s6 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s8", 13, ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 41: // s8 ::= END espacios 
            {
                Object RESULT = null;


                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s8", 13, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 40: // s6 ::= error equals s4 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s6", 11, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 39: // s6 ::= error espacios s4 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s6", 11, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 38: // s6 ::= error Y espacios 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s6", 11, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 37: // s6 ::= Y SPACE ID espacios equals espacios s4 s8 
            {
                Object RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 5)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 5)).right;
                String c = (String) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 5)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).right;
                Object op = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).value;
                int vleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).left;
                int vright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).right;
                Object v = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).value;

                condiciones tmp = new condiciones((String) c, (String) v, (String) op,"Y");
                arraycon.add(tmp);

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s6", 11, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 7)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 36: // s5 ::= END espacios 
            {
                Object RESULT = null;


                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s5", 10, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 35: // s5 ::= s7 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s5", 10, ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 34: // s5 ::= s6 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s5", 10, ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 33: // s4 ::= error NUMBER espacios 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s4", 9, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 32: // s4 ::= error COMILLAS espacios 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s4", 9, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 31: // s4 ::= NUMBER espacios 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).value;
                RESULT = (String) e;
                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s4", 9, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 30: // s4 ::= COMILLAS espacios ID espacios COMILLAS espacios 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).right;
                String e = (String) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).value;
                RESULT = e;
                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s4", 9, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 5)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 29: // s3 ::= error ID espacios 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s3", 8, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 28: // s3 ::= error espacios s4 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s3", 8, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 27: // s3 ::= SPACE espacios ID espacios equals espacios s4 s5 
            {
                Object RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 5)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 5)).right;
                String c = (String) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 5)).value;
                int opleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).left;
                int opright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).right;
                Object op = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).value;
                int vleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).left;
                int vright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).right;
                Object v = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).value;

                condiciones tmp = new condiciones((String) c, (String) v, (String) op,"");
                arraycon.add(tmp);

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s3", 8, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 7)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 26: // filtrar ::= error FILTRAR s3 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("filtrar", 4, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 25: // filtrar ::= SPACE espacios FILTRAR s3 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("filtrar", 4, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 24: // s12 ::= error 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s12", 17, ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 23: // s12 ::= filtrar 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s12", 17, ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 22: // s12 ::= espacios END 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s12", 17, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 21: // s2 ::= error ID s12 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s2", 7, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 20: // s2 ::= SPACE espacios ID s12 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).right;
                String e = (String) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).value;
                RESULT = e;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s2", 7, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 19: // s11 ::= error 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s11", 16, ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 18: // s11 ::= filtrar 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s11", 16, ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 17: // s11 ::= END 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s11", 16, ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 16: // s10 ::= error ID s11 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s10", 15, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 15: // s10 ::= error COMA s1 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s10", 15, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 14: // s10 ::= IN SPACE espacios ID s11 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).right;
                String e = (String) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).value;

                RESULT = e;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s10", 15, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 4)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 13: // s10 ::= COMA espacios s1 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).value;

                RESULT = e;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s10", 15, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 12: // s1 ::= error ID espacios 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s1", 6, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 11: // s1 ::= ID espacios s10 
            {
                Object RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)).right;
                String c = (String) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)).value;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).value;

                RESULT = e;
                arraycolumnas.add(c);

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("s1", 6, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 10: // op ::= error IN s2 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("op", 2, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 9: // op ::= ALL SPACE espacios IN s2 
               {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserSql$stack.elementAt(CUP$parserSql$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserSql$stack.elementAt(CUP$parserSql$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserSql$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserSql$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).value;
		
RESULT = e; 
arraycolumnas.add((String) c); 

              CUP$parserSql$result = parser.getSymbolFactory().newSymbol("op",2, ((java_cup.runtime.Symbol)CUP$parserSql$stack.elementAt(CUP$parserSql$top-4)), ((java_cup.runtime.Symbol)CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 8: // op ::= s1 
            {
                Object RESULT = null;
                int cleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).left;
                int cright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).right;
                Object c = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).value;
                RESULT = c;
                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("op", 2, ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 7: // options ::= error espacios op 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("options", 1, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 2)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 6: // options ::= DELETE SPACE espacios d1 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).right;
                Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).value;
                RESULT = e + "," + e2;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("options", 1, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
               
                parserSql.consultas.add(new sql((String)e,(String)e2,parserSql.arraycon,null,null,null));
                parserSql.arraycolumnas = new ArrayList();
                parserSql.arrayvalores = new ArrayList();
                parserSql.arraycon = new ArrayList();
                parserSql.arrayasig = new ArrayList();
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 5: // options ::= UPDATE SPACE espacios u1 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).right;
                Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).value;
                RESULT = e + "," + e2;
                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("options", 1, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
                
                parserSql.consultas.add(new sql((String)e,(String)e2,parserSql.arraycon,null,null,parserSql.arrayasig));
               
                parserSql.arraycolumnas = new ArrayList();
                parserSql.arrayvalores = new ArrayList();
                parserSql.arraycon = new ArrayList();
                parserSql.arrayasig = new ArrayList();
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 4: // options ::= INSERT SPACE espacios i1 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).right;
                Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).value;
                RESULT = e + "," + e2;
                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("options", 1, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
                
                parserSql.consultas.add(new sql((String)e,(String)e2,parserSql.arraycon,parserSql.arraycolumnas,parserSql.arrayvalores,null));
                parserSql.arraycolumnas = new ArrayList();
                parserSql.arrayvalores = new ArrayList();
                parserSql.arraycon = new ArrayList();
                parserSql.arrayasig = new ArrayList();
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 3: // options ::= SELECT SPACE espacios op 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)).value;
                int e2left = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).left;
                int e2right = ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).right;
                Object e2 = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()).value;
                RESULT = e + "," + e2;
                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("options", 1, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 3)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
               
                parserSql.consultas.add(new sql((String)e,(String)e2,parserSql.arraycon,parserSql.arraycolumnas,null,null));
                parserSql.arraycolumnas = new ArrayList();
                parserSql.arrayvalores = new ArrayList();
                parserSql.arraycon = new ArrayList();
                parserSql.arrayasig = new ArrayList();
            }

            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 2: // sql ::= 
            {
                Object RESULT = null;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("sql", 0, ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 1: // sql ::= options sql 
            {
                Object RESULT = null;
                int eleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).left;
                int eright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).right;
                Object e = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).value;

                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("sql", 0, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            return CUP$parserSql$result;

            /*. . . . . . . . . . . . . . . . . . . .*/
            case 0: // $START ::= sql EOF 
            {
                Object RESULT = null;
                int start_valleft = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).left;
                int start_valright = ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).right;
                Object start_val = (Object) ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)).value;
                RESULT = start_val;
                CUP$parserSql$result = parser.getSymbolFactory().newSymbol("$START", 0, ((java_cup.runtime.Symbol) CUP$parserSql$stack.elementAt(CUP$parserSql$top - 1)), ((java_cup.runtime.Symbol) CUP$parserSql$stack.peek()), RESULT);
            }
            /* ACCEPT */
            CUP$parserSql$parser.done_parsing();
            return CUP$parserSql$result;

            /* . . . . . .*/
            default:
                throw new Exception(
                        "Invalid action number found in internal parse table");

        }
    }
}


