
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Feb 11 19:12:13 CST 2020
//----------------------------------------------------

package analizadorLexico;

import java.util.ArrayList;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Feb 11 19:12:13 CST 2020
  */
public class parserIde extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserIde() {super();}

  /** Constructor which sets the default scanner. */
  public parserIde(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserIde(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\024\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\003\005\000\002\003\002\000\002\004\006\000" +
    "\002\004\006\000\002\004\005\000\002\004\005\000\002" +
    "\005\007\000\002\005\005\000\002\006\004\000\002\006" +
    "\003\000\002\006\003\000\002\007\005\000\002\007\005" +
    "\000\002\010\004\000\002\010\002\000\002\011\010\000" +
    "\002\012\012\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\013\006\000\002\013\005\000\002\014" +
    "\010\000\002\014\005\000\002\015\011\000\002\015\005" +
    "\000\002\016\007\000\002\016\005\000\002\017\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\010\003\004\013\006\016\uffed\001\002\000" +
    "\012\011\176\015\200\017\175\020\177\001\002\000\004" +
    "\016\012\001\002\000\036\002\uffed\003\uffed\004\uffed\005" +
    "\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013\006" +
    "\015\uffed\016\uffed\017\uffed\020\uffed\001\002\000\004\002" +
    "\010\001\002\000\004\002\001\001\002\000\034\002\uffee" +
    "\003\uffee\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011" +
    "\uffee\012\uffee\015\uffee\016\uffee\017\uffee\020\uffee\001\002" +
    "\000\006\007\uffed\013\006\001\002\000\004\007\014\001" +
    "\002\000\004\013\015\001\002\000\006\011\uffed\013\006" +
    "\001\002\000\004\011\017\001\002\000\006\013\006\020" +
    "\uffed\001\002\000\004\020\021\001\002\000\006\013\006" +
    "\017\uffed\001\002\000\004\017\023\001\002\000\004\024" +
    "\024\001\002\000\004\017\025\001\002\000\006\013\006" +
    "\015\uffed\001\002\000\004\015\027\001\002\000\010\005" +
    "\uffed\013\006\016\uffed\001\002\000\006\005\ufffa\016\031" +
    "\001\002\000\012\003\uffed\006\uffed\010\uffed\013\006\001" +
    "\002\000\004\005\033\001\002\000\004\002\000\001\002" +
    "\000\010\003\036\006\040\010\037\001\002\000\010\002" +
    "\ufffb\004\ufffb\005\ufffb\001\002\000\010\003\uffed\011\uffed" +
    "\013\006\001\002\000\004\013\071\001\002\000\004\013" +
    "\041\001\002\000\010\003\uffed\011\uffed\013\006\001\002" +
    "\000\006\003\044\011\043\001\002\000\006\013\006\020" +
    "\uffed\001\002\000\010\011\047\017\046\020\050\001\002" +
    "\000\010\002\ufff8\004\ufff8\005\ufff8\001\002\000\004\015" +
    "\053\001\002\000\012\002\uffed\004\uffed\005\uffed\013\006" +
    "\001\002\000\012\002\uffed\004\uffed\005\uffed\013\006\001" +
    "\002\000\010\002\uffe9\004\uffe9\005\uffe9\001\002\000\010" +
    "\002\uffea\004\uffea\005\uffea\001\002\000\010\004\uffed\013" +
    "\006\016\uffed\001\002\000\010\002\uffe8\004\uffe8\005\uffe8" +
    "\001\002\000\006\004\ufffa\016\031\001\002\000\004\004" +
    "\057\001\002\000\014\002\uffed\004\uffed\005\uffed\013\006" +
    "\016\uffed\001\002\000\012\002\ufffa\004\ufffa\005\ufffa\016" +
    "\031\001\002\000\010\002\uffec\004\uffec\005\uffec\001\002" +
    "\000\004\020\063\001\002\000\006\013\006\017\uffed\001" +
    "\002\000\004\017\065\001\002\000\004\024\066\001\002" +
    "\000\004\017\067\001\002\000\004\015\053\001\002\000" +
    "\010\002\uffeb\004\uffeb\005\uffeb\001\002\000\010\003\uffed" +
    "\011\uffed\013\006\001\002\000\006\003\074\011\073\001" +
    "\002\000\006\013\006\020\uffed\001\002\000\004\020\076" +
    "\001\002\000\010\002\ufff9\004\ufff9\005\ufff9\001\002\000" +
    "\010\003\077\013\006\017\uffed\001\002\000\004\013\153" +
    "\001\002\000\010\002\uffe6\004\uffe6\005\uffe6\001\002\000" +
    "\004\017\102\001\002\000\004\024\103\001\002\000\004" +
    "\017\104\001\002\000\004\013\105\001\002\000\010\003" +
    "\106\012\uffed\013\006\001\002\000\004\017\151\001\002" +
    "\000\010\002\uffe5\004\uffe5\005\uffe5\001\002\000\004\012" +
    "\111\001\002\000\006\013\006\020\uffed\001\002\000\004" +
    "\020\113\001\002\000\006\013\006\017\uffed\001\002\000" +
    "\004\017\115\001\002\000\006\003\120\021\121\001\002" +
    "\000\004\017\145\001\002\000\010\002\uffe3\004\uffe3\005" +
    "\uffe3\001\002\000\006\015\140\024\137\001\002\000\004" +
    "\023\122\001\002\000\004\021\123\001\002\000\004\024" +
    "\124\001\002\000\010\003\127\021\130\022\125\001\002" +
    "\000\004\014\136\001\002\000\004\017\ufff5\001\002\000" +
    "\006\017\ufff1\021\134\001\002\000\004\024\132\001\002" +
    "\000\004\017\ufff2\001\002\000\010\003\127\021\130\022" +
    "\125\001\002\000\004\017\ufff0\001\002\000\010\003\127" +
    "\021\130\022\125\001\002\000\004\017\uffef\001\002\000" +
    "\004\017\ufff3\001\002\000\010\003\127\021\130\022\125" +
    "\001\002\000\014\002\uffed\004\uffed\005\uffed\013\006\016" +
    "\uffed\001\002\000\010\002\uffe0\004\uffe0\005\uffe0\001\002" +
    "\000\012\002\ufffa\004\ufffa\005\ufffa\016\031\001\002\000" +
    "\010\002\uffdf\004\uffdf\005\uffdf\001\002\000\004\017\ufff4" +
    "\001\002\000\004\021\146\001\002\000\004\015\147\001" +
    "\002\000\014\002\uffed\004\uffed\005\uffed\013\006\016\uffed" +
    "\001\002\000\010\002\uffe1\004\uffe1\005\uffe1\001\002\000" +
    "\006\003\120\021\121\001\002\000\010\002\uffe2\004\uffe2" +
    "\005\uffe2\001\002\000\010\003\106\012\uffed\013\006\001" +
    "\002\000\010\002\uffe4\004\uffe4\005\uffe4\001\002\000\004" +
    "\020\156\001\002\000\010\003\077\013\006\017\uffed\001" +
    "\002\000\010\002\uffe7\004\uffe7\005\uffe7\001\002\000\006" +
    "\003\162\011\161\001\002\000\006\013\006\020\uffed\001" +
    "\002\000\010\011\047\017\046\020\165\001\002\000\010" +
    "\002\ufff6\004\ufff6\005\ufff6\001\002\000\010\002\ufff7\004" +
    "\ufff7\005\ufff7\001\002\000\016\002\uffed\003\077\004\uffed" +
    "\005\uffed\013\006\017\uffed\001\002\000\012\002\uffe9\004" +
    "\uffe9\005\uffe9\017\102\001\002\000\004\020\170\001\002" +
    "\000\010\003\077\013\006\017\uffed\001\002\000\004\017" +
    "\172\001\002\000\004\024\173\001\002\000\004\017\174" +
    "\001\002\000\006\013\105\015\053\001\002\000\006\002" +
    "\uffed\013\006\001\002\000\006\002\uffed\013\006\001\002" +
    "\000\006\002\uffed\013\006\001\002\000\006\002\ufffa\016" +
    "\031\001\002\000\004\002\ufffc\001\002\000\004\002\ufffe" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\ufffd\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\202\000\006\002\006\010\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\015\001\001\000\002\001\001\000\004\010\017\001" +
    "\001\000\002\001\001\000\004\010\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\025\001\001\000\002\001\001\000\004\010\027\001\001" +
    "\000\004\003\031\001\001\000\004\010\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\034\001\001" +
    "\000\002\001\001\000\004\010\157\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\041\001\001\000\004" +
    "\012\044\001\001\000\004\010\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\053\001\001\000\004" +
    "\010\051\001\001\000\004\010\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\054\001\001\000\002" +
    "\001\001\000\004\003\055\001\001\000\002\001\001\000" +
    "\004\010\057\001\001\000\004\003\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\067\001\001\000\002\001\001\000\004\010\071\001" +
    "\001\000\004\013\074\001\001\000\004\010\154\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\100\014" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\107\015\106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\111\001" +
    "\001\000\002\001\001\000\004\010\113\001\001\000\002" +
    "\001\001\000\006\005\115\016\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\125\007" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\132\007\130\001\001\000\002\001\001\000\006\006\134" +
    "\007\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\143\007\130\001\001\000\006\010\141\017\140" +
    "\001\001\000\002\001\001\000\004\003\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\141\017\147\001\001\000\002\001" +
    "\001\000\006\005\115\016\151\001\001\000\002\001\001" +
    "\000\006\010\107\015\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\100\014\156\001\001\000\002" +
    "\001\001\000\006\012\163\013\162\001\001\000\004\010" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\165\014\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\170\014\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\067\001\001\000\004\010\203\001\001\000\004" +
    "\010\202\001\001\000\004\010\201\001\001\000\004\003" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserIde$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserIde$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserIde$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




public static ArrayList<Symbol> errorSintatico;
    
    
    public void syntax_error(Symbol s){
        System.out.println("Error R aca de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        errorSintatico.add(s);
    }
  @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println("La Cadena:" +s.value+" en la Linea:"+(s.right+1) +" ,Columna: "+s.left+"esta fuera de contexto." ); 
   errorSintatico.add(s);
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserIde$actions {
  private final parserIde parser;

  /** Constructor */
  CUP$parserIde$actions(parserIde parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserIde$do_action(
    int                        CUP$parserIde$act_num,
    java_cup.runtime.lr_parser CUP$parserIde$parser,
    java.util.Stack            CUP$parserIde$stack,
    int                        CUP$parserIde$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserIde$result;

      /* select the action based on the action number */
      switch (CUP$parserIde$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // J ::= SPACE ATRIBUTES 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("J",13, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-1)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // I ::= error mayor J 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("I",12, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-2)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // I ::= ABSOLUTEPATH comillas slash mayor J 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("I",12, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-4)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // H ::= error comillas I 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("H",11, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-2)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // H ::= SPACE path SPACE equals SPACE comillas I 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("H",11, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-6)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // G ::= error space H 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("G",10, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-2)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // G ::= SPACE comillas ID comillas space H 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("G",10, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-5)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // F ::= error equals G 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("F",9, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-2)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // F ::= name SPACE equals G 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("F",9, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-3)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= error comillas C 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-2)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // E ::= error equals SPACE 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-2)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // E ::= error name SPACE 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-2)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // E ::= name SPACE equals SPACE comillas ID comillas C 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("E",8, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-7)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // C ::= mayor SPACE ATRIBUTES closefolder SPACE ATRIBUTES 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("C",7, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-5)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SPACE ::= 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("SPACE",6, ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SPACE ::= space SPACE 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("SPACE",6, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-1)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // D ::= error slash EXT 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("D",5, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-2)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // D ::= slash ID EXT 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-1)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parserIde$stack.elementAt(CUP$parserIde$top-1)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$parserIde$stack.peek()).value;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("D",5, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-2)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXT ::= error 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("EXT",4, ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXT ::= D 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parserIde$stack.peek()).value;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("EXT",4, ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXT ::= point extension 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parserIde$stack.elementAt(CUP$parserIde$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parserIde$stack.peek()).value;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("EXT",4, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-1)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ABSOLUTEPATH ::= error ID EXT 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("ABSOLUTEPATH",3, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-2)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ABSOLUTEPATH ::= slash HOME slash ID EXT 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("ABSOLUTEPATH",3, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-4)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DATAS ::= error SPACE F 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("DATAS",2, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-2)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DATAS ::= error SPACE E 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("DATAS",2, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-2)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DATAS ::= folder space SPACE E 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("DATAS",2, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-3)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DATAS ::= file space SPACE F 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("DATAS",2, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-3)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ATRIBUTES ::= 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("ATRIBUTES",1, ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ATRIBUTES ::= menor SPACE DATAS 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("ATRIBUTES",1, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-2)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PJ ::= error mayor ATRIBUTES 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("PJ",0, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-2)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PJ ::= error comillas SPACE 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("PJ",0, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-2)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PJ ::= error equals SPACE 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("PJ",0, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-2)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PJ ::= error name SPACE 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("PJ",0, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-2)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PJ ::= SPACE menor SPACE project space SPACE name SPACE equals SPACE comillas ID comillas SPACE mayor SPACE ATRIBUTES closeproject 
            {
              Object RESULT =null;

              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("PJ",0, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-17)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          return CUP$parserIde$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PJ EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserIde$stack.elementAt(CUP$parserIde$top-1)).value;
		RESULT = start_val;
              CUP$parserIde$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserIde$stack.elementAt(CUP$parserIde$top-1)), ((java_cup.runtime.Symbol)CUP$parserIde$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserIde$parser.done_parsing();
          return CUP$parserIde$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

